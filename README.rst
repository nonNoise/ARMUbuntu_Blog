======================================
ARMコアでUbuntuを動かすまでの研究Blog
======================================

■ はじめに
--------------------------------------

.. image:: http://image.gihyo.co.jp/assets/images/cover/2017/9784774189215.jpg
   :width: 200px

http://gihyo.jp/book/2017/978-4-7741-8921-5

**絶賛発売中！！！**

WiFiとBLEが乗り、USBもありI2Cなど色々あって超便利だったEdisonが市場に流通しなくなる一報を受け、
Edisonの便利さや使いやすさ、良かった場所を著書でまとめた著者が作るARMを使ったUbuntuが動く
コンピューターを作るまでの話をまとめていきます。

元になるEdisonについて詳しい情報は以下の書籍をご参考ください。

http://gihyo.jp/book/2017/978-4-7741-8921-5


■ ARMコアとは
--------------------------------------

ARM社がコアの設計図を持っており、それを半導体メーカーにライセンス販売をする。

今では何十社もの半導体メーカーがARMのライセンスを持ち、それぞれの用途に合わせてカスタマイズしたチップを販売。

ここでARMが良いだろうと思うのが、Edisonの様に、
１社の意思決定により中核部分が手に入らないと言った事が少なくなると思われる。
同じARMのコアのライセンスを持つ半導体メーカが何社かある状態ですので、
例えばA社から出ているCPUを使って作った某は、A社が販売をやめてしまったら大変ですよね。
ハードウェアは勿論大変ですよ。ですがソフトも使えなくなったら困りますよね。
ARMであれば、ハードウェアは作り直しですが、B社から同等に近いCPUを買って、
簡単な移植でソフトウェアも移植出来る。（はず）

そんな都合よく進むはずがないですが、ARMというライセンスメーカーが大手になった辺りを見ると、
ある程度うまく行っていた箇所があり、少し試してみようかなって言うのが今回の挑戦です。

(追加する予定)

■ OSが起動するまでの動き
--------------------------------------

CPUからOSを起動するまでの流れですが、

電源投入　-> CPU起動　-> ０番地読み出し　-> bootローダー起動　-> Linux起動　-> Ubuntu起動

と言った流れのはず（調査中）

ハードウェアで解決する箇所は

電源投入　-> CPU起動　-> ０番地読み出し　-> bootローダー起動

までを出来る様にしてあげれば、その後のLinuxの動作は詳しい方が沢山いますし、ソフトウェアなのでなんとかなるでしょう。

◇ 電源投入　-> CPU起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ここは基板設計（ハードウェア設計）でクリアするとしましょう。（著者はハードウェア設計が少し出来る）

◇ CPU起動　-> ０番地読み出し
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ここはCPUにもよるんですが、
大半はEEPROMやeMMC(SDメモリのチップ版)だったり、SDカードからの読み出しになります。

Edisonの時はeMMCが4GB程度あり、そこから起動していた可能性があります。
eMMCは調べてわかったんですが、SDカードのチップを基板に実装できるようにした物らしい。
（MMC！？ 破壊したはずでは...）

容量は１G〜４GBと小さめですが、基板に実装できるため組み込み用途では大変便利です。
eMMCの制御バスはSDカードと同じSPIで行けるはずなので、CPUの0番地読み出しがSPIで対応していれば行けるはず？？
また、ブートした後のLinuxなどを入れるHDDの変わりとしては調度良いのではないだろうか・・・

（ここで思うことは、eMMC１つにbootとLinuxを両方入れると、
もしeMMCが壊れた時に起動すらしないしエラーも出さないし、eMMCは基板に実装されてるから取り外せないじゃん！
ってなるので、bootはやっぱEEPROMとかで書き換えが出来なかったり分離されてたほうが嬉しいなぁ）

この辺りはCPUの選別で考えないといけないので、今は保留で。（後日記述）

◇ ０番地読み出し　-> bootローダー起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

さて、問題の0番地からのbootローダーの起動です。

そもそもbootローダーとは？？ (後日記載予定)

今回はEdisonの時で少し触れたu-bootを使いたいと思います。

u-bootとは；
https://ja.wikipedia.org/wiki/Das_U-Boot

C言語で書かれており、ARM用のGCCでビルドするとバイナリが出てくるから、それを0番地に放り込めばOK??

ただし、ビルドする際にCPUの型式、メモリ番地、デバック用のポートやらピンやらを設定しなきゃならないので、
その方法を纏める（予定）
